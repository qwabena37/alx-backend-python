name: CI â€” Lint, Tests & Coverage

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: 1
      DATABASE_HOST: 127.0.0.1
      DATABASE_PORT: "3306"
      DATABASE_NAME: ci_test_db
      DATABASE_USER: ci_user
      DATABASE_PASSWORD: ci_password

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ci_test_db
          MYSQL_USER: ci_user
          MYSQL_PASSWORD: ci_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system packages required for mysqlclient & mysql CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y default-mysql-client default-libmysqlclient-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install your runtime deps
          pip install -r requirements.txt
          # Install dev / lint / coverage tools (either from requirements-dev.txt or explicitly)
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install flake8 coverage; fi

      - name: Wait for MySQL to be ready
        env:
          MYSQL_PWD: ${{ env.DATABASE_PASSWORD }}
        run: |
          echo "Waiting for MySQL to accept connections..."
          for i in $(seq 1 30); do
            mysql -h $DATABASE_HOST -u$DATABASE_USER -e "SELECT 1" && break || sleep 2
            echo "  still waiting..."
          done

      - name: Run flake8 (lint) and save output
        id: flake
        shell: bash
        run: |
          # Run flake8, capture output to file, and exit with the same status as flake8.
          # We use tee so the output also appears in the logs.
          flake8 . | tee flake8.txt
          exit_code=${PIPESTATUS[0]}
          echo "flake8-exit-code=$exit_code" >> $GITHUB_OUTPUT
          exit $exit_code

      - name: Upload flake8 output (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flake8-output
          path: flake8.txt
          retention-days: 7

      - name: (Optional) Run migrations before tests
        run: python manage.py migrate --noinput

      - name: Run tests with coverage
        shell: bash
        run: |
          # Run tests under coverage (adjust --source to your package names if desired)
          coverage run --source='.' manage.py test
          # Generate reports
          coverage xml -i -o coverage.xml
          coverage html -d htmlcov

      - name: Bundle coverage (always) & prepare artifact files
        if: always()
        shell: bash
        run: |
          # If htmlcov exists, tar it; else create a placeholder
          if [ -d htmlcov ]; then
            tar -czf coverage-html.tar.gz htmlcov
            echo "Created coverage-html.tar.gz"
          else
            echo "No htmlcov directory found" > coverage-html-missing.txt
          fi
          # If coverage.xml exists leave it; else create placeholder
          if [ -f coverage.xml ]; then
            echo "coverage.xml found"
          else
            echo "No coverage.xml generated" > coverage.xml.missing.txt
          fi

      - name: Upload coverage artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage-html.tar.gz
            coverage.xml
            coverage.xml.missing.txt
            coverage-html-missing.txt
          retention-days: 7
