#!/bin/bash

# kubctl-0x01 - Kubernetes Scaling and Load Testing Script
# This script scales Django deployment, verifies pods, performs load testing, and monitors resources

set -e  # Exit on any error

# Configuration
DEPLOYMENT_NAME="django-messaging-app"
SERVICE_NAME="django-messaging-service"
TARGET_REPLICAS=3
LOAD_TEST_DURATION="30s"
LOAD_TEST_THREADS=4
LOAD_TEST_CONNECTIONS=100

echo "=========================================="
echo "Kubernetes Scaling & Load Testing Script"
echo "=========================================="
echo ""

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    echo "❌ Error: kubectl is not installed!"
    exit 1
fi

# Check if wrk is installed
if ! command -v wrk &> /dev/null; then
    echo "⚠️  Warning: wrk is not installed!"
    echo ""
    echo "Install wrk for load testing:"
    echo "  macOS:   brew install wrk"
    echo "  Ubuntu:  sudo apt-get install wrk"
    echo "  Fedora:  sudo dnf install wrk"
    echo ""
    WRK_INSTALLED=false
else
    WRK_INSTALLED=true
fi

# Check if metrics-server is enabled (for kubectl top)
echo "Checking if metrics-server is available..."
if kubectl top nodes &> /dev/null; then
    METRICS_AVAILABLE=true
    echo "✅ Metrics server is available"
else
    METRICS_AVAILABLE=false
    echo "⚠️  Metrics server not available. To enable:"
    echo "  minikube addons enable metrics-server"
    echo ""
fi
echo ""

# Step 1: Scale the deployment
echo "=========================================="
echo "Step 1: Scaling Deployment"
echo "=========================================="
echo ""
echo "Current deployment status:"
kubectl get deployment $DEPLOYMENT_NAME
echo ""

echo "Scaling $DEPLOYMENT_NAME to $TARGET_REPLICAS replicas..."
kubectl scale deployment/$DEPLOYMENT_NAME --replicas=$TARGET_REPLICAS
echo "✅ Scale command issued successfully!"
echo ""

# Wait for rollout to complete
echo "Waiting for rollout to complete..."
kubectl rollout status deployment/$DEPLOYMENT_NAME --timeout=120s
echo "✅ Rollout completed successfully!"
echo ""

# Step 2: Verify multiple pods are running
echo "=========================================="
echo "Step 2: Verifying Pods"
echo "=========================================="
echo ""
echo "Current pods for $DEPLOYMENT_NAME:"
kubectl get pods -l app=django-messaging -o wide
echo ""

# Count running pods
RUNNING_PODS=$(kubectl get pods -l app=django-messaging --field-selector=status.phase=Running --no-headers | wc -l)
echo "Number of running pods: $RUNNING_PODS"

if [ "$RUNNING_PODS" -ge "$TARGET_REPLICAS" ]; then
    echo "✅ All $TARGET_REPLICAS replicas are running!"
else
    echo "⚠️  Warning: Only $RUNNING_PODS out of $TARGET_REPLICAS pods are running"
fi
echo ""

# Display pod details
echo "Detailed pod information:"
kubectl describe pods -l app=django-messaging | grep -E "Name:|Status:|Node:|IP:"
echo ""

# Step 3: Set up port forwarding for load testing
echo "=========================================="
echo "Step 3: Setting up Port Forwarding"
echo "=========================================="
echo ""

# Kill any existing port-forward on port 8000
pkill -f "kubectl port-forward.*8000" 2>/dev/null || true
sleep 2

echo "Starting port-forward to service/$SERVICE_NAME..."
kubectl port-forward service/$SERVICE_NAME 8000:80 > /dev/null 2>&1 &
PORT_FORWARD_PID=$!
sleep 3

# Verify port-forward is working
if ps -p $PORT_FORWARD_PID > /dev/null; then
    echo "✅ Port-forward established (PID: $PORT_FORWARD_PID)"
    echo "Service accessible at http://localhost:8000"
else
    echo "❌ Failed to establish port-forward"
    exit 1
fi
echo ""

# Test connectivity
echo "Testing connectivity to the service..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q "200\|301\|302"; then
    echo "✅ Service is responding"
else
    echo "⚠️  Service may not be ready yet"
fi
echo ""

# Step 4: Perform load testing with wrk
if [ "$WRK_INSTALLED" = true ]; then
    echo "=========================================="
    echo "Step 4: Load Testing with wrk"
    echo "=========================================="
    echo ""
    echo "Configuration:"
    echo "  Duration:    $LOAD_TEST_DURATION"
    echo "  Threads:     $LOAD_TEST_THREADS"
    echo "  Connections: $LOAD_TEST_CONNECTIONS"
    echo "  URL:         http://localhost:8000"
    echo ""
    echo "Starting load test..."
    echo ""
    
    wrk -t$LOAD_TEST_THREADS -c$LOAD_TEST_CONNECTIONS -d$LOAD_TEST_DURATION \
        --latency http://localhost:8000
    
    echo ""
    echo "✅ Load test completed!"
    echo ""
else
    echo "=========================================="
    echo "Step 4: Load Testing - SKIPPED"
    echo "=========================================="
    echo "wrk is not installed. Skipping load test."
    echo ""
fi

# Step 5: Monitor resource usage
echo "=========================================="
echo "Step 5: Monitoring Resource Usage"
echo "=========================================="
echo ""

if [ "$METRICS_AVAILABLE" = true ]; then
    echo "Node resource usage:"
    kubectl top nodes
    echo ""
    
    echo "Pod resource usage:"
    kubectl top pods -l app=django-messaging
    echo ""
    
    echo "Detailed pod metrics:"
    kubectl top pods -l app=django-messaging --containers
    echo ""
    
    echo "✅ Resource monitoring completed!"
else
    echo "⚠️  Metrics server not available"
    echo ""
    echo "To enable metrics-server:"
    echo "  minikube addons enable metrics-server"
    echo ""
    echo "Showing alternative resource information:"
    kubectl describe nodes | grep -A 5 "Allocated resources"
    echo ""
fi

# Step 6: Final status summary
echo "=========================================="
echo "Step 6: Final Status Summary"
echo "=========================================="
echo ""

echo "Deployment Status:"
kubectl get deployment $DEPLOYMENT_NAME
echo ""

echo "Pods Status:"
kubectl get pods -l app=django-messaging
echo ""

echo "Service Status:"
kubectl get service $SERVICE_NAME
echo ""

echo "Recent Pod Events:"
kubectl get events --field-selector involvedObject.kind=Pod --sort-by='.lastTimestamp' | tail -10
echo ""

# Cleanup
echo "=========================================="
echo "Cleanup"
echo "=========================================="
echo ""
echo "Stopping port-forward..."
kill $PORT_FORWARD_PID 2>/dev/null || true
echo "✅ Port-forward stopped"
echo ""

# Final summary
echo "=========================================="
echo "✅ Script Completed Successfully!"
echo "=========================================="
echo ""
echo "Summary:"
echo "  - Deployment scaled to $TARGET_REPLICAS replicas"
echo "  - Running pods: $RUNNING_PODS"
if [ "$WRK_INSTALLED" = true ]; then
    echo "  - Load testing: Completed"
else
    echo "  - Load testing: Skipped (wrk not installed)"
fi
if [ "$METRICS_AVAILABLE" = true ]; then
    echo "  - Resource monitoring: Completed"
else
    echo "  - Resource monitoring: Limited (metrics-server not available)"
fi
echo ""
echo "Useful commands:"
echo "  kubectl logs -l app=django-messaging --tail=50 -f"
echo "  kubectl describe deployment $DEPLOYMENT_NAME"
echo "  kubectl scale deployment/$DEPLOYMENT_NAME --replicas=5"
echo ""