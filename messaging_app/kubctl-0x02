#!/bin/bash

# kubctl-0x02 - Blue-Green Deployment Script
# Performs zero-downtime deployment using blue-green strategy

set -e  # Exit on error

# Configuration
BLUE_DEPLOYMENT="blue_deployment.yaml"
GREEN_DEPLOYMENT="green_deployment.yaml"
SERVICE_FILE="kubeservice.yaml"
NAMESPACE="default"
APP_LABEL="app=django-messaging"
HEALTH_CHECK_RETRIES=30
HEALTH_CHECK_DELAY=10

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "=========================================="
echo "Blue-Green Deployment Script"
echo "Zero-Downtime Deployment Strategy"
echo "=========================================="
echo ""

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if deployment is ready
check_deployment_ready() {
    local deployment_name=$1
    local max_attempts=$2
    local attempt=0
    
    print_status "$YELLOW" "Waiting for deployment $deployment_name to be ready..."
    
    while [ $attempt -lt $max_attempts ]; do
        ready=$(kubectl get deployment $deployment_name -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
        desired=$(kubectl get deployment $deployment_name -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
        
        if [ "$ready" == "$desired" ] && [ "$ready" != "0" ]; then
            print_status "$GREEN" "‚úÖ Deployment $deployment_name is ready ($ready/$desired replicas)"
            return 0
        fi
        
        print_status "$YELLOW" "‚è≥ Waiting... ($ready/$desired replicas ready)"
        sleep $HEALTH_CHECK_DELAY
        ((attempt++))
    done
    
    print_status "$RED" "‚ùå Deployment $deployment_name failed to become ready"
    return 1
}

# Function to check pod logs for errors
check_pod_logs() {
    local version=$1
    print_status "$BLUE" "Checking logs for $version deployment..."
    echo ""
    
    # Get all pods for the version
    pods=$(kubectl get pods -l app=django-messaging,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_status "$RED" "‚ùå No pods found for version $version"
        return 1
    fi
    
    local errors_found=0
    
    for pod in $pods; do
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        print_status "$BLUE" "üìã Logs from pod: $pod"
        echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        
        # Check if pod is running
        pod_status=$(kubectl get pod $pod -o jsonpath='{.status.phase}')
        print_status "$YELLOW" "Pod status: $pod_status"
        
        # Get logs (last 50 lines)
        echo ""
        echo "Recent logs:"
        kubectl logs $pod --tail=50 2>&1 || {
            print_status "$RED" "‚ö†Ô∏è  Could not retrieve logs from $pod"
            continue
        }
        
        echo ""
        
        # Check for common error patterns
        if kubectl logs $pod --tail=100 2>&1 | grep -iE "error|exception|traceback|failed|fatal" > /dev/null; then
            print_status "$RED" "‚ö†Ô∏è  Potential errors detected in $pod logs"
            errors_found=1
            echo ""
            echo "Error details:"
            kubectl logs $pod --tail=100 2>&1 | grep -iE "error|exception|traceback|failed|fatal"
        else
            print_status "$GREEN" "‚úÖ No obvious errors in $pod logs"
        fi
        
        echo ""
    done
    
    return $errors_found
}

# Function to switch traffic
switch_traffic() {
    local target_version=$1
    print_status "$YELLOW" "Switching traffic to $target_version version..."
    
    # Update the main service selector
    kubectl patch service django-messaging-service -p "{\"spec\":{\"selector\":{\"app\":\"django-messaging\",\"version\":\"$target_version\"}}}"
    
    print_status "$GREEN" "‚úÖ Traffic switched to $target_version version"
}

# Step 1: Check current state
echo "=========================================="
echo "Step 1: Current State"
echo "=========================================="
echo ""

print_status "$BLUE" "Current deployments:"
kubectl get deployments -l $APP_LABEL 2>/dev/null || print_status "$YELLOW" "No existing deployments found"
echo ""

print_status "$BLUE" "Current services:"
kubectl get services -l $APP_LABEL 2>/dev/null || print_status "$YELLOW" "No existing services found"
echo ""

# Step 2: Deploy/Update Blue version (current stable)
echo "=========================================="
echo "Step 2: Deploying Blue Version (Stable)"
echo "=========================================="
echo ""

if [ -f "$BLUE_DEPLOYMENT" ]; then
    print_status "$BLUE" "Applying blue deployment..."
    kubectl apply -f $BLUE_DEPLOYMENT
    echo ""
    
    # Wait for blue deployment
    if ! check_deployment_ready "django-messaging-blue" $HEALTH_CHECK_RETRIES; then
        print_status "$RED" "‚ùå Blue deployment failed"
        exit 1
    fi
else
    print_status "$RED" "‚ùå Blue deployment file not found: $BLUE_DEPLOYMENT"
    exit 1
fi

echo ""

# Step 3: Deploy Services
echo "=========================================="
echo "Step 3: Deploying/Updating Services"
echo "=========================================="
echo ""

if [ -f "$SERVICE_FILE" ]; then
    print_status "$BLUE" "Applying services configuration..."
    kubectl apply -f $SERVICE_FILE
    echo ""
    
    print_status "$GREEN" "‚úÖ Services deployed"
    kubectl get services -l $APP_LABEL
else
    print_status "$RED" "‚ùå Service file not found: $SERVICE_FILE"
    exit 1
fi

echo ""

# Step 4: Check Blue deployment logs
echo "=========================================="
echo "Step 4: Checking Blue Deployment Logs"
echo "=========================================="
echo ""

if ! check_pod_logs "blue"; then
    print_status "$YELLOW" "‚ö†Ô∏è  Warnings found in blue deployment, but continuing..."
fi

echo ""

# Step 5: Deploy Green version (new version)
echo "=========================================="
echo "Step 5: Deploying Green Version (New)"
echo "=========================================="
echo ""

if [ -f "$GREEN_DEPLOYMENT" ]; then
    print_status "$BLUE" "Applying green deployment..."
    kubectl apply -f $GREEN_DEPLOYMENT
    echo ""
    
    # Wait for green deployment
    if ! check_deployment_ready "django-messaging-green" $HEALTH_CHECK_RETRIES; then
        print_status "$RED" "‚ùå Green deployment failed"
        print_status "$YELLOW" "Blue version remains active (no traffic switch)"
        exit 1
    fi
else
    print_status "$RED" "‚ùå Green deployment file not found: $GREEN_DEPLOYMENT"
    exit 1
fi

echo ""

# Step 6: Check Green deployment logs
echo "=========================================="
echo "Step 6: Checking Green Deployment Logs"
echo "=========================================="
echo ""

if ! check_pod_logs "green"; then
    print_status "$RED" "‚ùå Errors detected in green deployment!"
    print_status "$YELLOW" "Recommendation: Do NOT switch traffic to green"
    print_status "$BLUE" "Blue version remains active"
    echo ""
    print_status "$YELLOW" "To rollback green deployment, run:"
    print_status "$YELLOW" "  kubectl delete deployment django-messaging-green"
    exit 1
else
    print_status "$GREEN" "‚úÖ Green deployment looks healthy!"
fi

echo ""

# Step 7: Test green service directly
echo "=========================================="
echo "Step 7: Testing Green Service"
echo "=========================================="
echo ""

print_status "$BLUE" "Green service endpoint (for testing):"
kubectl get service django-messaging-green-service
echo ""

print_status "$YELLOW" "You can test the green version using:"
print_status "$YELLOW" "  kubectl port-forward service/django-messaging-green-service 8001:80"
print_status "$YELLOW" "  curl http://localhost:8001"
echo ""

# Step 8: Traffic switching prompt
echo "=========================================="
echo "Step 8: Traffic Switching Decision"
echo "=========================================="
echo ""

print_status "$BLUE" "Current production traffic points to: BLUE"
print_status "$GREEN" "New green version is ready and healthy!"
echo ""

read -p "Do you want to switch traffic to GREEN version? (yes/no): " switch_decision

if [ "$switch_decision" == "yes" ] || [ "$switch_decision" == "y" ]; then
    echo ""
    switch_traffic "green"
    echo ""
    print_status "$GREEN" "‚úÖ Traffic successfully switched to GREEN!"
    print_status "$BLUE" "Blue deployment remains available for quick rollback if needed"
else
    echo ""
    print_status "$YELLOW" "Traffic remains on BLUE version"
    print_status "$BLUE" "To manually switch traffic later, run:"
    print_status "$BLUE" "  kubectl patch service django-messaging-service -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'"
fi

echo ""

# Step 9: Final status
echo "=========================================="
echo "Step 9: Final Status Summary"
echo "=========================================="
echo ""

print_status "$BLUE" "All Deployments:"
kubectl get deployments -l $APP_LABEL
echo ""

print_status "$BLUE" "All Pods:"
kubectl get pods -l $APP_LABEL -o wide
echo ""

print_status "$BLUE" "All Services:"
kubectl get services -l $APP_LABEL
echo ""

print_status "$BLUE" "Main Service Selector:"
kubectl get service django-messaging-service -o jsonpath='{.spec.selector}' | jq '.'
echo ""
echo ""

# Final instructions
echo "=========================================="
echo "‚úÖ Blue-Green Deployment Complete!"
echo "=========================================="
echo ""
print_status "$GREEN" "Useful Commands:"
echo ""
print_status "$BLUE" "Switch to Green:"
echo "  kubectl patch service django-messaging-service -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'"
echo ""
print_status "$BLUE" "Rollback to Blue:"
echo "  kubectl patch service django-messaging-service -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'"
echo ""
print_status "$BLUE" "Test Blue directly:"
echo "  kubectl port-forward service/django-messaging-blue-service 8080:80"
echo ""
print_status "$BLUE" "Test Green directly:"
echo "  kubectl port-forward service/django-messaging-green-service 8081:80"
echo ""
print_status "$BLUE" "View Blue logs:"
echo "  kubectl logs -l version=blue --tail=100 -f"
echo ""
print_status "$BLUE" "View Green logs:"
echo "  kubectl logs -l version=green --tail=100 -f"
echo ""
print_status "$BLUE" "Delete Green (complete rollback):"
echo "  kubectl delete deployment django-messaging-green"
echo ""